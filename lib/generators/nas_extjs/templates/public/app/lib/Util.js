// Generated by CoffeeScript 1.3.3
(function() {
  var assoc, proxy_eh, proxy_sorters;

  proxy_eh = function(proxy, request, operation) {
    var responseObj, title;
    title = 'Error id: ' + request.status;
    if (request.responseText) {
      responseObj = Ext.decode(request.responseText, true);
      if (responseObj && (responseObj.message != null)) {
        return Ext.Msg.alert(title, responseObj.message);
      } else {
        return Ext.Msg.alert(title, 'Unknown error: Operation did not succeed');
      }
    } else {
      return Ext.Msg.alert(title, 'Unknown response code: Unable to understand the response from the server');
    }
  };

  proxy_sorters = function(sorters) {
    var sorter, str;
    str = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = sorters.length; _i < _len; _i++) {
        sorter = sorters[_i];
        _results.push("[" + sorter.property + "]=" + sorter.direction);
      }
      return _results;
    })();
    return str.join('&');
  };

  window.Util = {
    underscore: function(str) {
      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();
    },
    humanize: function(str) {
      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();
    },
    baseClassName: function(name) {
      var els;
      if (Ext.isObject(name)) {
        name = Ext.getClassName(name);
      }
      els = name.split('.');
      return els[els.length - 1];
    },
    makeProxy: function(name, options) {
      if (options == null) {
        options = {};
      }
      return {
        api_key: name,
        type: 'rest',
        url: '/api/' + name,
        setAssociations: options['setAssociations'] || [],
        encodeSorters: proxy_sorters,
        includeOptionalFields: options['includeOptionalFields'] || [],
        setFilter: options['setFilter'],
        reader: {
          type: 'json',
          root: 'data'
        },
        listeners: {
          exception: proxy_eh
        },
        writer: {
          type: 'json',
          root: 'data',
          writeAllFields: false,
          getRecordData: function(record) {
            var data, _ref;
            _ref = record.getAssociatedData();
            for (name in _ref) {
              data = _ref[name];
              if (data.id == null) {
                delete data.id;
              }
              record.data[Util.underscore(name) + '_attributes'] = data;
              delete record.data[name];
            }
            return record.data;
          }
        }
      };
    },
    normalizeCode: function(code) {
      return code.toUpperCase().replace(/[^a-zA-Z0-9]+/g, '');
    },
    getStore: function(name) {
      return Ext.data.StoreManager.lookup(name) || Ext.create("App.store." + name, {
        storeId: name
      });
    },
    reloadView: function(name) {
      if (!window.Application || Util.is_reloading) {
        return;
      }
      console.clear();
      return Application.getController('Tabs').replaceView("App.view." + name);
    },
    changeListenerUpCaseField: function(f, nv, ov, opts) {
      if (nv) {
        return f.setValue(nv.toUpperCase());
      }
    },
    changeListenerCodeField: function(f, nv, ov, opts) {
      if (nv) {
        return f.setValue(App.Util.normalizeCode(nv));
      }
    },
    extractOptions: function(args) {
      if (Ext.isObject(args[args.length - 1])) {
        return [args.slice(0, args.length + 1 || 9e9), args[args.length - 1]];
      } else {
        return [args, {}];
      }
    },
    reloadController: function(controller_name) {
      var ary, cl, controller, event, evs, i, indx, name, old, old_evs, scope, tree, _i, _j, _len, _ref, _ref1;
      if (!window.Application || Util.is_reloading) {
        return;
      }
      console.clear();
      old = Application.controllers.get(controller_name);
      if (old) {
        _ref = Application.eventbus.bus;
        for (name in _ref) {
          scope = _ref[name];
          for (cl in scope) {
            evs = scope[cl];
            for (tree in evs) {
              ary = evs[tree];
              old_evs = [];
              for (i = _i = 0, _ref1 = ary.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                event = ary[i];
                if (event.observable.id === old.id) {
                  old_evs.push(i);
                }
              }
              for (_j = 0, _len = old_evs.length; _j < _len; _j++) {
                indx = old_evs[_j];
                ary.splice(indx, 1);
              }
            }
          }
        }
        Application.controllers.remove(old);
      }
      controller = Application.getController(controller_name);
      return controller.init(this);
    }
  };

  assoc = function(association) {
    if (association.isAssociation) {
      return association;
    }
    if (Ext.isString(association)) {
      association = {
        type: association
      };
    }
    switch (association.type) {
      case 'belongsTo':
        return Ext.create('App.model.BelongsTo', association);
      case 'hasMany':
        return Ext.create('App.model.HasMany', association);
      default:
        Ext.Error.raise('Unknown Association type: "' + association.type + '"');
    }
    return association;
  };

  if (Ext.ClassManager.isCreated('Ext.data.Association')) {
    Ext.data.Association.create = assoc;
  } else {
    Ext.require(['Ext.data.Association'], function() {
      return Ext.data.Association.create = assoc;
    });
  }

  Ext.define('App.Util', {
    statics: window.Util
  });

}).call(this);
